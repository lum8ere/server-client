// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed-api-v2/libs/3_generated_models/model"
)

func newDeviceGroup(db *gorm.DB, opts ...gen.DOOption) deviceGroup {
	_deviceGroup := deviceGroup{}

	_deviceGroup.deviceGroupDo.UseDB(db, opts...)
	_deviceGroup.deviceGroupDo.UseModel(&model.DeviceGroup{})

	tableName := _deviceGroup.deviceGroupDo.TableName()
	_deviceGroup.ALL = field.NewAsterisk(tableName)
	_deviceGroup.ID = field.NewString(tableName, "id")
	_deviceGroup.Name = field.NewString(tableName, "name")
	_deviceGroup.Description = field.NewString(tableName, "description")
	_deviceGroup.CreatedAt = field.NewTime(tableName, "created_at")

	_deviceGroup.fillFieldMap()

	return _deviceGroup
}

type deviceGroup struct {
	deviceGroupDo

	ALL         field.Asterisk
	ID          field.String
	Name        field.String
	Description field.String
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (d deviceGroup) Table(newTableName string) *deviceGroup {
	d.deviceGroupDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deviceGroup) As(alias string) *deviceGroup {
	d.deviceGroupDo.DO = *(d.deviceGroupDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deviceGroup) updateTableName(table string) *deviceGroup {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.Name = field.NewString(table, "name")
	d.Description = field.NewString(table, "description")
	d.CreatedAt = field.NewTime(table, "created_at")

	d.fillFieldMap()

	return d
}

func (d *deviceGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deviceGroup) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 4)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["description"] = d.Description
	d.fieldMap["created_at"] = d.CreatedAt
}

func (d deviceGroup) clone(db *gorm.DB) deviceGroup {
	d.deviceGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deviceGroup) replaceDB(db *gorm.DB) deviceGroup {
	d.deviceGroupDo.ReplaceDB(db)
	return d
}

type deviceGroupDo struct{ gen.DO }

type IDeviceGroupDo interface {
	gen.SubQuery
	Debug() IDeviceGroupDo
	WithContext(ctx context.Context) IDeviceGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeviceGroupDo
	WriteDB() IDeviceGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeviceGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeviceGroupDo
	Not(conds ...gen.Condition) IDeviceGroupDo
	Or(conds ...gen.Condition) IDeviceGroupDo
	Select(conds ...field.Expr) IDeviceGroupDo
	Where(conds ...gen.Condition) IDeviceGroupDo
	Order(conds ...field.Expr) IDeviceGroupDo
	Distinct(cols ...field.Expr) IDeviceGroupDo
	Omit(cols ...field.Expr) IDeviceGroupDo
	Join(table schema.Tabler, on ...field.Expr) IDeviceGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeviceGroupDo
	Group(cols ...field.Expr) IDeviceGroupDo
	Having(conds ...gen.Condition) IDeviceGroupDo
	Limit(limit int) IDeviceGroupDo
	Offset(offset int) IDeviceGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceGroupDo
	Unscoped() IDeviceGroupDo
	Create(values ...*model.DeviceGroup) error
	CreateInBatches(values []*model.DeviceGroup, batchSize int) error
	Save(values ...*model.DeviceGroup) error
	First() (*model.DeviceGroup, error)
	Take() (*model.DeviceGroup, error)
	Last() (*model.DeviceGroup, error)
	Find() ([]*model.DeviceGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceGroup, err error)
	FindInBatches(result *[]*model.DeviceGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeviceGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeviceGroupDo
	Assign(attrs ...field.AssignExpr) IDeviceGroupDo
	Joins(fields ...field.RelationField) IDeviceGroupDo
	Preload(fields ...field.RelationField) IDeviceGroupDo
	FirstOrInit() (*model.DeviceGroup, error)
	FirstOrCreate() (*model.DeviceGroup, error)
	FindByPage(offset int, limit int) (result []*model.DeviceGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeviceGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deviceGroupDo) Debug() IDeviceGroupDo {
	return d.withDO(d.DO.Debug())
}

func (d deviceGroupDo) WithContext(ctx context.Context) IDeviceGroupDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deviceGroupDo) ReadDB() IDeviceGroupDo {
	return d.Clauses(dbresolver.Read)
}

func (d deviceGroupDo) WriteDB() IDeviceGroupDo {
	return d.Clauses(dbresolver.Write)
}

func (d deviceGroupDo) Session(config *gorm.Session) IDeviceGroupDo {
	return d.withDO(d.DO.Session(config))
}

func (d deviceGroupDo) Clauses(conds ...clause.Expression) IDeviceGroupDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deviceGroupDo) Returning(value interface{}, columns ...string) IDeviceGroupDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deviceGroupDo) Not(conds ...gen.Condition) IDeviceGroupDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deviceGroupDo) Or(conds ...gen.Condition) IDeviceGroupDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deviceGroupDo) Select(conds ...field.Expr) IDeviceGroupDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deviceGroupDo) Where(conds ...gen.Condition) IDeviceGroupDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deviceGroupDo) Order(conds ...field.Expr) IDeviceGroupDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deviceGroupDo) Distinct(cols ...field.Expr) IDeviceGroupDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deviceGroupDo) Omit(cols ...field.Expr) IDeviceGroupDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deviceGroupDo) Join(table schema.Tabler, on ...field.Expr) IDeviceGroupDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deviceGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceGroupDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deviceGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeviceGroupDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deviceGroupDo) Group(cols ...field.Expr) IDeviceGroupDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deviceGroupDo) Having(conds ...gen.Condition) IDeviceGroupDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deviceGroupDo) Limit(limit int) IDeviceGroupDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deviceGroupDo) Offset(offset int) IDeviceGroupDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deviceGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceGroupDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deviceGroupDo) Unscoped() IDeviceGroupDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deviceGroupDo) Create(values ...*model.DeviceGroup) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deviceGroupDo) CreateInBatches(values []*model.DeviceGroup, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deviceGroupDo) Save(values ...*model.DeviceGroup) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deviceGroupDo) First() (*model.DeviceGroup, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceGroup), nil
	}
}

func (d deviceGroupDo) Take() (*model.DeviceGroup, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceGroup), nil
	}
}

func (d deviceGroupDo) Last() (*model.DeviceGroup, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceGroup), nil
	}
}

func (d deviceGroupDo) Find() ([]*model.DeviceGroup, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeviceGroup), err
}

func (d deviceGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceGroup, err error) {
	buf := make([]*model.DeviceGroup, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deviceGroupDo) FindInBatches(result *[]*model.DeviceGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deviceGroupDo) Attrs(attrs ...field.AssignExpr) IDeviceGroupDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deviceGroupDo) Assign(attrs ...field.AssignExpr) IDeviceGroupDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deviceGroupDo) Joins(fields ...field.RelationField) IDeviceGroupDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deviceGroupDo) Preload(fields ...field.RelationField) IDeviceGroupDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deviceGroupDo) FirstOrInit() (*model.DeviceGroup, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceGroup), nil
	}
}

func (d deviceGroupDo) FirstOrCreate() (*model.DeviceGroup, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceGroup), nil
	}
}

func (d deviceGroupDo) FindByPage(offset int, limit int) (result []*model.DeviceGroup, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deviceGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deviceGroupDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deviceGroupDo) Delete(models ...*model.DeviceGroup) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deviceGroupDo) withDO(do gen.Dao) *deviceGroupDo {
	d.DO = *do.(*gen.DO)
	return d
}
