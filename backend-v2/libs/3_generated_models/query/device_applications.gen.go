// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed-api-v2/libs/3_generated_models/model"
)

func newDeviceApplication(db *gorm.DB, opts ...gen.DOOption) deviceApplication {
	_deviceApplication := deviceApplication{}

	_deviceApplication.deviceApplicationDo.UseDB(db, opts...)
	_deviceApplication.deviceApplicationDo.UseModel(&model.DeviceApplication{})

	tableName := _deviceApplication.deviceApplicationDo.TableName()
	_deviceApplication.ALL = field.NewAsterisk(tableName)
	_deviceApplication.DeviceID = field.NewString(tableName, "device_id")
	_deviceApplication.ApplicationID = field.NewString(tableName, "application_id")
	_deviceApplication.InstalledAt = field.NewTime(tableName, "installed_at")

	_deviceApplication.fillFieldMap()

	return _deviceApplication
}

type deviceApplication struct {
	deviceApplicationDo

	ALL           field.Asterisk
	DeviceID      field.String
	ApplicationID field.String
	InstalledAt   field.Time

	fieldMap map[string]field.Expr
}

func (d deviceApplication) Table(newTableName string) *deviceApplication {
	d.deviceApplicationDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deviceApplication) As(alias string) *deviceApplication {
	d.deviceApplicationDo.DO = *(d.deviceApplicationDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deviceApplication) updateTableName(table string) *deviceApplication {
	d.ALL = field.NewAsterisk(table)
	d.DeviceID = field.NewString(table, "device_id")
	d.ApplicationID = field.NewString(table, "application_id")
	d.InstalledAt = field.NewTime(table, "installed_at")

	d.fillFieldMap()

	return d
}

func (d *deviceApplication) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deviceApplication) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["device_id"] = d.DeviceID
	d.fieldMap["application_id"] = d.ApplicationID
	d.fieldMap["installed_at"] = d.InstalledAt
}

func (d deviceApplication) clone(db *gorm.DB) deviceApplication {
	d.deviceApplicationDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deviceApplication) replaceDB(db *gorm.DB) deviceApplication {
	d.deviceApplicationDo.ReplaceDB(db)
	return d
}

type deviceApplicationDo struct{ gen.DO }

type IDeviceApplicationDo interface {
	gen.SubQuery
	Debug() IDeviceApplicationDo
	WithContext(ctx context.Context) IDeviceApplicationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeviceApplicationDo
	WriteDB() IDeviceApplicationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeviceApplicationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeviceApplicationDo
	Not(conds ...gen.Condition) IDeviceApplicationDo
	Or(conds ...gen.Condition) IDeviceApplicationDo
	Select(conds ...field.Expr) IDeviceApplicationDo
	Where(conds ...gen.Condition) IDeviceApplicationDo
	Order(conds ...field.Expr) IDeviceApplicationDo
	Distinct(cols ...field.Expr) IDeviceApplicationDo
	Omit(cols ...field.Expr) IDeviceApplicationDo
	Join(table schema.Tabler, on ...field.Expr) IDeviceApplicationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceApplicationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeviceApplicationDo
	Group(cols ...field.Expr) IDeviceApplicationDo
	Having(conds ...gen.Condition) IDeviceApplicationDo
	Limit(limit int) IDeviceApplicationDo
	Offset(offset int) IDeviceApplicationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceApplicationDo
	Unscoped() IDeviceApplicationDo
	Create(values ...*model.DeviceApplication) error
	CreateInBatches(values []*model.DeviceApplication, batchSize int) error
	Save(values ...*model.DeviceApplication) error
	First() (*model.DeviceApplication, error)
	Take() (*model.DeviceApplication, error)
	Last() (*model.DeviceApplication, error)
	Find() ([]*model.DeviceApplication, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceApplication, err error)
	FindInBatches(result *[]*model.DeviceApplication, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeviceApplication) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeviceApplicationDo
	Assign(attrs ...field.AssignExpr) IDeviceApplicationDo
	Joins(fields ...field.RelationField) IDeviceApplicationDo
	Preload(fields ...field.RelationField) IDeviceApplicationDo
	FirstOrInit() (*model.DeviceApplication, error)
	FirstOrCreate() (*model.DeviceApplication, error)
	FindByPage(offset int, limit int) (result []*model.DeviceApplication, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeviceApplicationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deviceApplicationDo) Debug() IDeviceApplicationDo {
	return d.withDO(d.DO.Debug())
}

func (d deviceApplicationDo) WithContext(ctx context.Context) IDeviceApplicationDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deviceApplicationDo) ReadDB() IDeviceApplicationDo {
	return d.Clauses(dbresolver.Read)
}

func (d deviceApplicationDo) WriteDB() IDeviceApplicationDo {
	return d.Clauses(dbresolver.Write)
}

func (d deviceApplicationDo) Session(config *gorm.Session) IDeviceApplicationDo {
	return d.withDO(d.DO.Session(config))
}

func (d deviceApplicationDo) Clauses(conds ...clause.Expression) IDeviceApplicationDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deviceApplicationDo) Returning(value interface{}, columns ...string) IDeviceApplicationDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deviceApplicationDo) Not(conds ...gen.Condition) IDeviceApplicationDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deviceApplicationDo) Or(conds ...gen.Condition) IDeviceApplicationDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deviceApplicationDo) Select(conds ...field.Expr) IDeviceApplicationDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deviceApplicationDo) Where(conds ...gen.Condition) IDeviceApplicationDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deviceApplicationDo) Order(conds ...field.Expr) IDeviceApplicationDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deviceApplicationDo) Distinct(cols ...field.Expr) IDeviceApplicationDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deviceApplicationDo) Omit(cols ...field.Expr) IDeviceApplicationDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deviceApplicationDo) Join(table schema.Tabler, on ...field.Expr) IDeviceApplicationDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deviceApplicationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceApplicationDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deviceApplicationDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeviceApplicationDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deviceApplicationDo) Group(cols ...field.Expr) IDeviceApplicationDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deviceApplicationDo) Having(conds ...gen.Condition) IDeviceApplicationDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deviceApplicationDo) Limit(limit int) IDeviceApplicationDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deviceApplicationDo) Offset(offset int) IDeviceApplicationDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deviceApplicationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceApplicationDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deviceApplicationDo) Unscoped() IDeviceApplicationDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deviceApplicationDo) Create(values ...*model.DeviceApplication) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deviceApplicationDo) CreateInBatches(values []*model.DeviceApplication, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deviceApplicationDo) Save(values ...*model.DeviceApplication) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deviceApplicationDo) First() (*model.DeviceApplication, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceApplication), nil
	}
}

func (d deviceApplicationDo) Take() (*model.DeviceApplication, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceApplication), nil
	}
}

func (d deviceApplicationDo) Last() (*model.DeviceApplication, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceApplication), nil
	}
}

func (d deviceApplicationDo) Find() ([]*model.DeviceApplication, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeviceApplication), err
}

func (d deviceApplicationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceApplication, err error) {
	buf := make([]*model.DeviceApplication, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deviceApplicationDo) FindInBatches(result *[]*model.DeviceApplication, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deviceApplicationDo) Attrs(attrs ...field.AssignExpr) IDeviceApplicationDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deviceApplicationDo) Assign(attrs ...field.AssignExpr) IDeviceApplicationDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deviceApplicationDo) Joins(fields ...field.RelationField) IDeviceApplicationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deviceApplicationDo) Preload(fields ...field.RelationField) IDeviceApplicationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deviceApplicationDo) FirstOrInit() (*model.DeviceApplication, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceApplication), nil
	}
}

func (d deviceApplicationDo) FirstOrCreate() (*model.DeviceApplication, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceApplication), nil
	}
}

func (d deviceApplicationDo) FindByPage(offset int, limit int) (result []*model.DeviceApplication, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deviceApplicationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deviceApplicationDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deviceApplicationDo) Delete(models ...*model.DeviceApplication) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deviceApplicationDo) withDO(do gen.Dao) *deviceApplicationDo {
	d.DO = *do.(*gen.DO)
	return d
}
