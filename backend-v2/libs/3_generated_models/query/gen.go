// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                 = new(Query)
	Application       *application
	Command           *command
	Device            *device
	DeviceApplication *deviceApplication
	Metric            *metric
	Role              *role
	Status            *status
	User              *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Application = &Q.Application
	Command = &Q.Command
	Device = &Q.Device
	DeviceApplication = &Q.DeviceApplication
	Metric = &Q.Metric
	Role = &Q.Role
	Status = &Q.Status
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		Application:       newApplication(db, opts...),
		Command:           newCommand(db, opts...),
		Device:            newDevice(db, opts...),
		DeviceApplication: newDeviceApplication(db, opts...),
		Metric:            newMetric(db, opts...),
		Role:              newRole(db, opts...),
		Status:            newStatus(db, opts...),
		User:              newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Application       application
	Command           command
	Device            device
	DeviceApplication deviceApplication
	Metric            metric
	Role              role
	Status            status
	User              user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Application:       q.Application.clone(db),
		Command:           q.Command.clone(db),
		Device:            q.Device.clone(db),
		DeviceApplication: q.DeviceApplication.clone(db),
		Metric:            q.Metric.clone(db),
		Role:              q.Role.clone(db),
		Status:            q.Status.clone(db),
		User:              q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Application:       q.Application.replaceDB(db),
		Command:           q.Command.replaceDB(db),
		Device:            q.Device.replaceDB(db),
		DeviceApplication: q.DeviceApplication.replaceDB(db),
		Metric:            q.Metric.replaceDB(db),
		Role:              q.Role.replaceDB(db),
		Status:            q.Status.replaceDB(db),
		User:              q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Application       IApplicationDo
	Command           ICommandDo
	Device            IDeviceDo
	DeviceApplication IDeviceApplicationDo
	Metric            IMetricDo
	Role              IRoleDo
	Status            IStatusDo
	User              IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Application:       q.Application.WithContext(ctx),
		Command:           q.Command.WithContext(ctx),
		Device:            q.Device.WithContext(ctx),
		DeviceApplication: q.DeviceApplication.WithContext(ctx),
		Metric:            q.Metric.WithContext(ctx),
		Role:              q.Role.WithContext(ctx),
		Status:            q.Status.WithContext(ctx),
		User:              q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
