// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed-api-v2/apps/gen-type/libs/3_generated_models/model"
)

func newStatus(db *gorm.DB, opts ...gen.DOOption) status {
	_status := status{}

	_status.statusDo.UseDB(db, opts...)
	_status.statusDo.UseModel(&model.Status{})

	tableName := _status.statusDo.TableName()
	_status.ALL = field.NewAsterisk(tableName)
	_status.ID = field.NewString(tableName, "id")
	_status.Name = field.NewString(tableName, "name")
	_status.Code = field.NewString(tableName, "code")
	_status.Context = field.NewString(tableName, "context")
	_status.CreatedAt = field.NewTime(tableName, "created_at")

	_status.fillFieldMap()

	return _status
}

type status struct {
	statusDo

	ALL       field.Asterisk
	ID        field.String
	Name      field.String
	Code      field.String
	Context   field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s status) Table(newTableName string) *status {
	s.statusDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s status) As(alias string) *status {
	s.statusDo.DO = *(s.statusDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *status) updateTableName(table string) *status {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.Code = field.NewString(table, "code")
	s.Context = field.NewString(table, "context")
	s.CreatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *status) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *status) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["code"] = s.Code
	s.fieldMap["context"] = s.Context
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s status) clone(db *gorm.DB) status {
	s.statusDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s status) replaceDB(db *gorm.DB) status {
	s.statusDo.ReplaceDB(db)
	return s
}

type statusDo struct{ gen.DO }

type IStatusDo interface {
	gen.SubQuery
	Debug() IStatusDo
	WithContext(ctx context.Context) IStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStatusDo
	WriteDB() IStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStatusDo
	Not(conds ...gen.Condition) IStatusDo
	Or(conds ...gen.Condition) IStatusDo
	Select(conds ...field.Expr) IStatusDo
	Where(conds ...gen.Condition) IStatusDo
	Order(conds ...field.Expr) IStatusDo
	Distinct(cols ...field.Expr) IStatusDo
	Omit(cols ...field.Expr) IStatusDo
	Join(table schema.Tabler, on ...field.Expr) IStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStatusDo
	Group(cols ...field.Expr) IStatusDo
	Having(conds ...gen.Condition) IStatusDo
	Limit(limit int) IStatusDo
	Offset(offset int) IStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStatusDo
	Unscoped() IStatusDo
	Create(values ...*model.Status) error
	CreateInBatches(values []*model.Status, batchSize int) error
	Save(values ...*model.Status) error
	First() (*model.Status, error)
	Take() (*model.Status, error)
	Last() (*model.Status, error)
	Find() ([]*model.Status, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Status, err error)
	FindInBatches(result *[]*model.Status, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Status) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStatusDo
	Assign(attrs ...field.AssignExpr) IStatusDo
	Joins(fields ...field.RelationField) IStatusDo
	Preload(fields ...field.RelationField) IStatusDo
	FirstOrInit() (*model.Status, error)
	FirstOrCreate() (*model.Status, error)
	FindByPage(offset int, limit int) (result []*model.Status, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s statusDo) Debug() IStatusDo {
	return s.withDO(s.DO.Debug())
}

func (s statusDo) WithContext(ctx context.Context) IStatusDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s statusDo) ReadDB() IStatusDo {
	return s.Clauses(dbresolver.Read)
}

func (s statusDo) WriteDB() IStatusDo {
	return s.Clauses(dbresolver.Write)
}

func (s statusDo) Session(config *gorm.Session) IStatusDo {
	return s.withDO(s.DO.Session(config))
}

func (s statusDo) Clauses(conds ...clause.Expression) IStatusDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s statusDo) Returning(value interface{}, columns ...string) IStatusDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s statusDo) Not(conds ...gen.Condition) IStatusDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s statusDo) Or(conds ...gen.Condition) IStatusDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s statusDo) Select(conds ...field.Expr) IStatusDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s statusDo) Where(conds ...gen.Condition) IStatusDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s statusDo) Order(conds ...field.Expr) IStatusDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s statusDo) Distinct(cols ...field.Expr) IStatusDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s statusDo) Omit(cols ...field.Expr) IStatusDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s statusDo) Join(table schema.Tabler, on ...field.Expr) IStatusDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s statusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStatusDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s statusDo) RightJoin(table schema.Tabler, on ...field.Expr) IStatusDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s statusDo) Group(cols ...field.Expr) IStatusDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s statusDo) Having(conds ...gen.Condition) IStatusDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s statusDo) Limit(limit int) IStatusDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s statusDo) Offset(offset int) IStatusDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s statusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStatusDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s statusDo) Unscoped() IStatusDo {
	return s.withDO(s.DO.Unscoped())
}

func (s statusDo) Create(values ...*model.Status) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s statusDo) CreateInBatches(values []*model.Status, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s statusDo) Save(values ...*model.Status) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s statusDo) First() (*model.Status, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Status), nil
	}
}

func (s statusDo) Take() (*model.Status, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Status), nil
	}
}

func (s statusDo) Last() (*model.Status, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Status), nil
	}
}

func (s statusDo) Find() ([]*model.Status, error) {
	result, err := s.DO.Find()
	return result.([]*model.Status), err
}

func (s statusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Status, err error) {
	buf := make([]*model.Status, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s statusDo) FindInBatches(result *[]*model.Status, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s statusDo) Attrs(attrs ...field.AssignExpr) IStatusDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s statusDo) Assign(attrs ...field.AssignExpr) IStatusDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s statusDo) Joins(fields ...field.RelationField) IStatusDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s statusDo) Preload(fields ...field.RelationField) IStatusDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s statusDo) FirstOrInit() (*model.Status, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Status), nil
	}
}

func (s statusDo) FirstOrCreate() (*model.Status, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Status), nil
	}
}

func (s statusDo) FindByPage(offset int, limit int) (result []*model.Status, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s statusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s statusDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s statusDo) Delete(models ...*model.Status) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *statusDo) withDO(do gen.Dao) *statusDo {
	s.DO = *do.(*gen.DO)
	return s
}
